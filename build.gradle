plugins {
	id 'org.ajoberstar.grgit' version '1.5.0'
}
ext {
	jfxLocation = project.hasProperty('jfx_doc_location') ? 
	    'file:/' + project.getProperty('jfx_doc_location') :
	    'http://docs.oracle.com/javafx/2/api/'
    if(!project.hasProperty('jfx_doc_location')) {
    	logger.info('JavaFX-Documentation is set to http://docs.oracle.com/.' + 
    		' If you want to specify a different location add \'jfx_doc_location\' to your gradle.properties')
    }
}

apply plugin: 'distribution'

description = 'The root-project. Contains the subprojects and a Launcher'

// general setup
allprojects {
	apply plugin: 'eclipse'
	
	group 'de.herrlock.manga'
	version '1.4.1-BETA-SNAPSHOT'
	
	apply plugin: 'java'
	apply plugin: 'findbugs'
	apply plugin: 'pmd'
	apply plugin: 'jacoco'
	apply plugin: 'maven-publish'
	apply plugin: 'project-report'
	apply plugin: 'build-dashboard'
	
	sourceCompatibility = '1.7'
	
	dependencies {
		// compile-annotations
		compileOnly 'com.google.code.findbugs:annotations:3.0.1'
		compileOnly 'com.google.auto.service:auto-service:1.0-rc2'
		
		// logging
		if(!'MangaLog'.equals(project.name)) {
			compile project(':MangaLog')
		}
		
		// for testing
		testCompile 'junit:junit:4.12'
		testCompile 'org.mockito:mockito-core:1.10.19'
	}
	
	jar.manifest {
		attributes 'Built-At' : new Date(),
			'Built-With' : GradleVersion.current(),
			'Created-By' : "${System.properties.'java.runtime.version'} (${System.properties.'java.vm.vendor'})",
			'Version' : project.version,
			'Info'
		attributes 'Branch' : grgit.branch.getCurrent().getName(),
			'Commit' : grgit.head().getId(),
			'Date' : grgit.head().getDate(),
			'Git'
	}
	
	findbugs {
		effort = 'max'
		reportLevel = 'low'
	}
	tasks.withType(FindBugs) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}
	
	pmd {
		ignoreFailures = true
		ruleSetFiles = files("${rootProject.projectDir}/misc/pmd.rulesets.xml")
	}
	
	eclipse {
		project {
			buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
		}
		classpath {
			file.withXml {
				def jfxrt = it.asNode().children().find{ entry ->
					return entry['@path'].contains('jfxrt') 
				}
				Node attributes = new Node(jfxrt, 'attributes')
				Node attribute = new Node(attributes, 'attribute')
				attribute.'@name' = 'javadoc_location'
				attribute.'@value' = jfxLocation
			}
		}
	}
	
	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
		classifier 'sources'
	}
	assemble.dependsOn sourceJar
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
		from tasks.javadoc.outputs
		classifier 'javadoc'
	}
	assemble.dependsOn javadocJar
	
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourceJar
				artifact javadocJar
			}
		}
	}
	
	repositories {
		mavenCentral()
	}
}

task dist(dependsOn: [distZip, distTar], group: 'Distribution', description: 'Run distZip and distTar') {
	// does nothing itself
}

// project-configuration
dependencies {
	compile project(':MangaLib')
	compile project(':MangaCtrl')
	
	compile 'commons-cli:commons-cli:1.3.1'
}

jar {
	manifest {
		attributes 'Main-Class' : 'de.herrlock.manga.UnpackerMain',
			'Class-Path' : project.configurations.runtime
				.plus(file('MangaExt.jar'))
				.collect{ file -> "lib/${file.name}" }
				.sort{ it.toLowerCase() }
				.join(' ')
	}
}

task packDependencies {
	def jars = configurations.runtime
	File targetFolder = new File(rootProject.buildDir, 'tmp/packJars/')
	doLast {
		targetFolder.mkdirs()
	}
	java.util.jar.Pack200.Packer packer = java.util.jar.Pack200.newPacker();
	packer.properties().putAll([
		(packer.EFFORT) : '9',
		(packer.SEGMENT_LIMIT) : '-1',
		(packer.KEEP_FILE_ORDER) : packer.FALSE,
		(packer.MODIFICATION_TIME) : packer.LATEST,
		(packer.DEFLATE_HINT) : packer.TRUE,
		(packer.UNKNOWN_ATTRIBUTE) : packer.ERROR
	])
	if(project.hasProperty('stripLNT')) {
		packer.properties().put(packer.CODE_ATTRIBUTE_PFX + 'LineNumberTable', packer.STRIP)
	}
	jars.each { jar ->
		if(!'jfxrt.jar'.equals(jar.getName())) {
			File newFile = new File(targetFolder, jar.getName() + '.pack.gz')
			outputs.file newFile
			doLast {
				new java.util.jar.JarInputStream( new FileInputStream(jar) ).withStream { jarIn ->
					new java.util.zip.GZIPOutputStream( newFile.newOutputStream() ).withStream { gzOut ->
						logger.info "Packing to ${newFile}"
				        packer.pack( jarIn, gzOut );
				    }
			    }
			}
		}
	}
}

distributions {
	main {
		baseName = project.name
		version = project.version
		contents {
			from 'LICENSE'
			from (jar.outputs) {
				rename '.+', 'MangaLauncher.jar'
			}
			into ('licenses') {
				from 'licenses'
			}
			into('lib') {
				from packDependencies
			}
			into('tomcat') {
				into('webapps') {
					from {
						// closure to initialise the resource on demand instead of directly
						project(':MangaWar').war.outputs
					}
					rename '.+', 'ROOT.war'
				}
			}
			filesMatching ('MangaLauncher.sh') {
				it.setMode 0744
			}
		}
	}
}

tasks.withType(Tar) {
	compression = Compression.GZIP
}
